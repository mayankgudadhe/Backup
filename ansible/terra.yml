resource "aws_iam_role" "certmanager_dns_iam_role" {
  name        = local.cert_manager_iam_role_name
  description = "IRSA Role for certmanager DNS in cluster"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = "sts:AssumeRoleWithWebIdentity"
      Effect = "Allow"
      Principal = {
        Federated = "arn:aws:iam::${var.account_id}:oidc-provider/${var.eks_cluster_oidc_provider}"
      }
      Condition = {
        StringEquals = {
          "${var.eks_cluster_oidc_provider}:sub" = [
            "system:serviceaccount:cert-manager:cert-manager",
            "system:serviceaccount:cert-manager:cert-manager-cainjector",
            "system:serviceaccount:cert-manager:cert-manager-webhook",
            "system:serviceaccount:cert-manager:default"
          ]
        }
      }
    }]
    Version = "2012-10-17"
  })
  lifecycle {
    ignore_changes = [
      assume_role_policy
    ]
  }
}

resource "aws_iam_role_policy" "certmanager_dns_policy" {
  name = "${var.customer}-${var.environment}-${var.stack_id}-certmanager-dns-policy"
  role = aws_iam_role.certmanager_dns_iam_role.name

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        "Effect" : "Allow",
        "Action" : [
          "route53:ChangeResourceRecordSets"
        ],
        "Resource" : [
          "arn:aws:route53:::hostedzone/${local.hostedzone_ids}"
        ]
      },
      {
        "Effect" : "Allow",
        "Action" : [
          "route53:ListHostedZones",
          "route53:ListResourceRecordSets",
          "route53:ListHostedZonesByName",
          "route53:GetChange"
        ],
        "Resource" : [
          "*"
        ]
      }
    ]
  })
}

data "aws_iam_policy_document" "certmanager_iam_role_trust_policy" {
  version = "2012-10-17"
  statement {
    effect = "Allow"
    principals {
      type        = "AWS"
      identifiers = [var.cert_manager_iam_arn]
    }
    actions = [
      "sts:AssumeRole"
    ]
  }
  statement {
    effect = "Allow"
    principals {
      type        = "Federated"
      identifiers = ["arn:aws:iam::${var.account_id}:oidc-provider/${var.eks_cluster_oidc_provider}"]
    }
    actions = [
      "sts:AssumeRoleWithWebIdentity"
    ]
    condition {
      test     = "StringEquals"
      variable = "${var.eks_cluster_oidc_provider}:sub"
      values = [
        "system:serviceaccount:cert-manager:cert-manager",
        "system:serviceaccount:cert-manager:cert-manager-cainjector",
        "system:serviceaccount:cert-manager:cert-manager-webhook",
        "system:serviceaccount:cert-manager:default"
      ]
    }
  }
}

resource "local_file" "certmanager_iam_trusted_policy" {
  content  = data.aws_iam_policy_document.certmanager_iam_role_trust_policy.json
  filename = local.trusted_policy_file_name
}

resource "null_resource" "certmanager_iam_update_trusted_policy" {
  depends_on = [
    local_file.certmanager_iam_trusted_policy
  ]
  triggers = {
    content = local_file.certmanager_iam_trusted_policy.content
  }

  provisioner "local-exec" {
    interpreter = ["bash", "-c"]
    command     = <<EOT
    n=0
    max=5
    while :
    do
      aws iam update-assume-role-policy --role-name '${local.cert_manager_iam_role_name}' --policy-document file://${local.trusted_policy_file_name}
      [[ $? = 0 ]] && break || ((n++))
      if [[ $n -lt $max ]]; then
        echo "Command failed. Attempt $n/$max:"
        sleep 10;
      else
        echo "The command has failed after $n attempts."
        exit 1
      fi
    done
EOT
  }
}

resource "kubernetes_manifest" "cluster_issuer_letsencrypt_prod" {
  computed_fields = ["metadata.generated", "spec.acme"]
  manifest = {
    apiVersion = "cert-manager.io/v1"
    kind       = "ClusterIssuer"
    metadata = {
      name = "letsencrypt-prod"
    }
    spec = {
      acme = {
        email = "mailto:nux-nco@hyland.com"
        privateKeySecretRef = {
          name = "letsencrypt-prod"
        }
        server = "https://acme-v02.api.letsencrypt.org/directory"
        solvers = [
          {
            dns01 = {
              route53 = {
                region       = var.aws_region
                hostedZoneID = local.hostedzone_ids
                role         = aws_iam_role.certmanager_dns_iam_role.arn
              }
            }
          },
        ]
      }
    }
  }
}


############################CLUSTER ISSUER FOR STAGING ##########################

resource "kubernetes_manifest" "cluster_issuer_letsencrypt_staging" {
  computed_fields = ["metadata.generated", "spec.acme"]
  manifest = {
    apiVersion = "cert-manager.io/v1"
    kind       = "ClusterIssuer"
    metadata = {
      name = "letsencrypt-staging"
    }
    spec = {
      acme = {
        email = "mailto:nux-nco@hyland.com"
        privateKeySecretRef = {
          name = "letsencrypt-staging"
        }
        server = "https://acme-staging-v02.api.letsencrypt.org/directory"
        solvers = [
          {
            dns01 = {
              route53 = {
                region       = var.aws_region
                hostedZoneID = local.hostedzone_ids
                role         = aws_iam_role.certmanager_dns_iam_role.arn
              }
            }
          },
        ]
      }
    }
  }
}
